
MultiLED_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080011f4  080011f4  000021f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001218  08001218  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001218  08001218  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001218  08001218  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001218  08001218  00002218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800121c  0800121c  0000221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001220  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800122c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800122c  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000287c  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e09  00000000  00000000  000058b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  000066c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002b8  00000000  00000000  00006a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015918  00000000  00000000  00006d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000498e  00000000  00000000  0001c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bba1  00000000  00000000  00020fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cb8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d2c  00000000  00000000  0009cbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0009d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080011dc 	.word	0x080011dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080011dc 	.word	0x080011dc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f934 	bl	80003bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f824 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f85e 	bl	8000218 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800015c:	2200      	movs	r2, #0
 800015e:	2107      	movs	r1, #7
 8000160:	480d      	ldr	r0, [pc, #52]	@ (8000198 <main+0x4c>)
 8000162:	f000 fc19 	bl	8000998 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	2103      	movs	r1, #3
 800016a:	480c      	ldr	r0, [pc, #48]	@ (800019c <main+0x50>)
 800016c:	f000 fc14 	bl	8000998 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8000170:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000174:	f000 f984 	bl	8000480 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2107      	movs	r1, #7
 800017c:	4806      	ldr	r0, [pc, #24]	@ (8000198 <main+0x4c>)
 800017e:	f000 fc0b 	bl	8000998 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1,GPIO_PIN_SET);
 8000182:	2201      	movs	r2, #1
 8000184:	2103      	movs	r1, #3
 8000186:	4805      	ldr	r0, [pc, #20]	@ (800019c <main+0x50>)
 8000188:	f000 fc06 	bl	8000998 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 800018c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000190:	f000 f976 	bl	8000480 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000194:	bf00      	nop
 8000196:	e7e1      	b.n	800015c <main+0x10>
 8000198:	40010800 	.word	0x40010800
 800019c:	40010c00 	.word	0x40010c00

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	@ 0x40
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	2228      	movs	r2, #40	@ 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 ffe8 	bl	8001184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	1d3b      	adds	r3, r7, #4
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]
 80001ba:	605a      	str	r2, [r3, #4]
 80001bc:	609a      	str	r2, [r3, #8]
 80001be:	60da      	str	r2, [r3, #12]
 80001c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c2:	2302      	movs	r3, #2
 80001c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ca:	2310      	movs	r3, #16
 80001cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ce:	2300      	movs	r3, #0
 80001d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fbf6 	bl	80009c8 <HAL_RCC_OscConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e2:	f000 f86b 	bl	80002bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 fe64 	bl	8000ecc <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020a:	f000 f857 	bl	80002bc <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3740      	adds	r7, #64	@ 0x40
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022c:	4b20      	ldr	r3, [pc, #128]	@ (80002b0 <MX_GPIO_Init+0x98>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a1f      	ldr	r2, [pc, #124]	@ (80002b0 <MX_GPIO_Init+0x98>)
 8000232:	f043 0304 	orr.w	r3, r3, #4
 8000236:	6193      	str	r3, [r2, #24]
 8000238:	4b1d      	ldr	r3, [pc, #116]	@ (80002b0 <MX_GPIO_Init+0x98>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	f003 0304 	and.w	r3, r3, #4
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000244:	4b1a      	ldr	r3, [pc, #104]	@ (80002b0 <MX_GPIO_Init+0x98>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a19      	ldr	r2, [pc, #100]	@ (80002b0 <MX_GPIO_Init+0x98>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b17      	ldr	r3, [pc, #92]	@ (80002b0 <MX_GPIO_Init+0x98>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f003 0308 	and.w	r3, r3, #8
 8000258:	603b      	str	r3, [r7, #0]
 800025a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2107      	movs	r1, #7
 8000260:	4814      	ldr	r0, [pc, #80]	@ (80002b4 <MX_GPIO_Init+0x9c>)
 8000262:	f000 fb99 	bl	8000998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2103      	movs	r1, #3
 800026a:	4813      	ldr	r0, [pc, #76]	@ (80002b8 <MX_GPIO_Init+0xa0>)
 800026c:	f000 fb94 	bl	8000998 <HAL_GPIO_WritePin>


  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000270:	2307      	movs	r3, #7
 8000272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000274:	2301      	movs	r3, #1
 8000276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027c:	2302      	movs	r3, #2
 800027e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000280:	f107 0308 	add.w	r3, r7, #8
 8000284:	4619      	mov	r1, r3
 8000286:	480b      	ldr	r0, [pc, #44]	@ (80002b4 <MX_GPIO_Init+0x9c>)
 8000288:	f000 fa02 	bl	8000690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800028c:	2303      	movs	r3, #3
 800028e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000290:	2301      	movs	r3, #1
 8000292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000298:	2302      	movs	r3, #2
 800029a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029c:	f107 0308 	add.w	r3, r7, #8
 80002a0:	4619      	mov	r1, r3
 80002a2:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <MX_GPIO_Init+0xa0>)
 80002a4:	f000 f9f4 	bl	8000690 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002a8:	bf00      	nop
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40010800 	.word	0x40010800
 80002b8:	40010c00 	.word	0x40010c00

080002bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c0:	b672      	cpsid	i
}
 80002c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c4:	bf00      	nop
 80002c6:	e7fd      	b.n	80002c4 <Error_Handler+0x8>

080002c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000308 <HAL_MspInit+0x40>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000308 <HAL_MspInit+0x40>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6193      	str	r3, [r2, #24]
 80002da:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <HAL_MspInit+0x40>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002e6:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <HAL_MspInit+0x40>)
 80002e8:	69db      	ldr	r3, [r3, #28]
 80002ea:	4a07      	ldr	r2, [pc, #28]	@ (8000308 <HAL_MspInit+0x40>)
 80002ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002f0:	61d3      	str	r3, [r2, #28]
 80002f2:	4b05      	ldr	r3, [pc, #20]	@ (8000308 <HAL_MspInit+0x40>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000310:	bf00      	nop
 8000312:	e7fd      	b.n	8000310 <NMI_Handler+0x4>

08000314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <HardFault_Handler+0x4>

0800031c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <MemManage_Handler+0x4>

08000324 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <BusFault_Handler+0x4>

0800032c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <UsageFault_Handler+0x4>

08000334 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800035c:	f000 f874 	bl	8000448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}

08000364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000370:	f7ff fff8 	bl	8000364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480b      	ldr	r0, [pc, #44]	@ (80003a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000376:	490c      	ldr	r1, [pc, #48]	@ (80003a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000378:	4a0c      	ldr	r2, [pc, #48]	@ (80003ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a09      	ldr	r2, [pc, #36]	@ (80003b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800038c:	4c09      	ldr	r4, [pc, #36]	@ (80003b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800039a:	f000 fefb 	bl	8001194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff fed5 	bl	800014c <main>
  bx lr
 80003a2:	4770      	bx	lr
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003ac:	08001220 	.word	0x08001220
  ldr r2, =_sbss
 80003b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003b4:	2000002c 	.word	0x2000002c

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003c0:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <HAL_Init+0x28>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a07      	ldr	r2, [pc, #28]	@ (80003e4 <HAL_Init+0x28>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003cc:	2003      	movs	r0, #3
 80003ce:	f000 f92b 	bl	8000628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003d2:	200f      	movs	r0, #15
 80003d4:	f000 f808 	bl	80003e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003d8:	f7ff ff76 	bl	80002c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40022000 	.word	0x40022000

080003e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <HAL_InitTick+0x54>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <HAL_InitTick+0x58>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4619      	mov	r1, r3
 80003fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000402:	fbb2 f3f3 	udiv	r3, r2, r3
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f935 	bl	8000676 <HAL_SYSTICK_Config>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000412:	2301      	movs	r3, #1
 8000414:	e00e      	b.n	8000434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b0f      	cmp	r3, #15
 800041a:	d80a      	bhi.n	8000432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800041c:	2200      	movs	r2, #0
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	f04f 30ff 	mov.w	r0, #4294967295
 8000424:	f000 f90b 	bl	800063e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000428:	4a06      	ldr	r2, [pc, #24]	@ (8000444 <HAL_InitTick+0x5c>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800042e:	2300      	movs	r3, #0
 8000430:	e000      	b.n	8000434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000432:	2301      	movs	r3, #1
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000000 	.word	0x20000000
 8000440:	20000008 	.word	0x20000008
 8000444:	20000004 	.word	0x20000004

08000448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800044c:	4b05      	ldr	r3, [pc, #20]	@ (8000464 <HAL_IncTick+0x1c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_IncTick+0x20>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4413      	add	r3, r2
 8000458:	4a03      	ldr	r2, [pc, #12]	@ (8000468 <HAL_IncTick+0x20>)
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	20000008 	.word	0x20000008
 8000468:	20000028 	.word	0x20000028

0800046c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  return uwTick;
 8000470:	4b02      	ldr	r3, [pc, #8]	@ (800047c <HAL_GetTick+0x10>)
 8000472:	681b      	ldr	r3, [r3, #0]
}
 8000474:	4618      	mov	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	20000028 	.word	0x20000028

08000480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000488:	f7ff fff0 	bl	800046c <HAL_GetTick>
 800048c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000498:	d005      	beq.n	80004a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800049a:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <HAL_Delay+0x44>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	461a      	mov	r2, r3
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	4413      	add	r3, r2
 80004a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004a6:	bf00      	nop
 80004a8:	f7ff ffe0 	bl	800046c <HAL_GetTick>
 80004ac:	4602      	mov	r2, r0
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d8f7      	bhi.n	80004a8 <HAL_Delay+0x28>
  {
  }
}
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000008 	.word	0x20000008

080004c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f003 0307 	and.w	r3, r3, #7
 80004d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004d8:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <__NVIC_SetPriorityGrouping+0x44>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80004e4:	4013      	ands	r3, r2
 80004e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80004f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004fa:	4a04      	ldr	r2, [pc, #16]	@ (800050c <__NVIC_SetPriorityGrouping+0x44>)
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	60d3      	str	r3, [r2, #12]
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000514:	4b04      	ldr	r3, [pc, #16]	@ (8000528 <__NVIC_GetPriorityGrouping+0x18>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	0a1b      	lsrs	r3, r3, #8
 800051a:	f003 0307 	and.w	r3, r3, #7
}
 800051e:	4618      	mov	r0, r3
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	db0a      	blt.n	8000556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	b2da      	uxtb	r2, r3
 8000544:	490c      	ldr	r1, [pc, #48]	@ (8000578 <__NVIC_SetPriority+0x4c>)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	0112      	lsls	r2, r2, #4
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	440b      	add	r3, r1
 8000550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000554:	e00a      	b.n	800056c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4908      	ldr	r1, [pc, #32]	@ (800057c <__NVIC_SetPriority+0x50>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 030f 	and.w	r3, r3, #15
 8000562:	3b04      	subs	r3, #4
 8000564:	0112      	lsls	r2, r2, #4
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	440b      	add	r3, r1
 800056a:	761a      	strb	r2, [r3, #24]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000e100 	.word	0xe000e100
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000580:	b480      	push	{r7}
 8000582:	b089      	sub	sp, #36	@ 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	f1c3 0307 	rsb	r3, r3, #7
 800059a:	2b04      	cmp	r3, #4
 800059c:	bf28      	it	cs
 800059e:	2304      	movcs	r3, #4
 80005a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3304      	adds	r3, #4
 80005a6:	2b06      	cmp	r3, #6
 80005a8:	d902      	bls.n	80005b0 <NVIC_EncodePriority+0x30>
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	3b03      	subs	r3, #3
 80005ae:	e000      	b.n	80005b2 <NVIC_EncodePriority+0x32>
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 32ff 	mov.w	r2, #4294967295
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43da      	mvns	r2, r3
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	401a      	ands	r2, r3
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c8:	f04f 31ff 	mov.w	r1, #4294967295
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43d9      	mvns	r1, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	4313      	orrs	r3, r2
         );
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3724      	adds	r7, #36	@ 0x24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr

080005e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005f4:	d301      	bcc.n	80005fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00f      	b.n	800061a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <SysTick_Config+0x40>)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3b01      	subs	r3, #1
 8000600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000602:	210f      	movs	r1, #15
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f7ff ff90 	bl	800052c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <SysTick_Config+0x40>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000612:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <SysTick_Config+0x40>)
 8000614:	2207      	movs	r2, #7
 8000616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	e000e010 	.word	0xe000e010

08000628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ff49 	bl	80004c8 <__NVIC_SetPriorityGrouping>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
 800064a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000650:	f7ff ff5e 	bl	8000510 <__NVIC_GetPriorityGrouping>
 8000654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	6978      	ldr	r0, [r7, #20]
 800065c:	f7ff ff90 	bl	8000580 <NVIC_EncodePriority>
 8000660:	4602      	mov	r2, r0
 8000662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff5f 	bl	800052c <__NVIC_SetPriority>
}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ffb0 	bl	80005e4 <SysTick_Config>
 8000684:	4603      	mov	r3, r0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000690:	b480      	push	{r7}
 8000692:	b08b      	sub	sp, #44	@ 0x2c
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006a2:	e169      	b.n	8000978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006a4:	2201      	movs	r2, #1
 80006a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	69fa      	ldr	r2, [r7, #28]
 80006b4:	4013      	ands	r3, r2
 80006b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006b8:	69ba      	ldr	r2, [r7, #24]
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	429a      	cmp	r2, r3
 80006be:	f040 8158 	bne.w	8000972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	4a9a      	ldr	r2, [pc, #616]	@ (8000930 <HAL_GPIO_Init+0x2a0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d05e      	beq.n	800078a <HAL_GPIO_Init+0xfa>
 80006cc:	4a98      	ldr	r2, [pc, #608]	@ (8000930 <HAL_GPIO_Init+0x2a0>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d875      	bhi.n	80007be <HAL_GPIO_Init+0x12e>
 80006d2:	4a98      	ldr	r2, [pc, #608]	@ (8000934 <HAL_GPIO_Init+0x2a4>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d058      	beq.n	800078a <HAL_GPIO_Init+0xfa>
 80006d8:	4a96      	ldr	r2, [pc, #600]	@ (8000934 <HAL_GPIO_Init+0x2a4>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d86f      	bhi.n	80007be <HAL_GPIO_Init+0x12e>
 80006de:	4a96      	ldr	r2, [pc, #600]	@ (8000938 <HAL_GPIO_Init+0x2a8>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d052      	beq.n	800078a <HAL_GPIO_Init+0xfa>
 80006e4:	4a94      	ldr	r2, [pc, #592]	@ (8000938 <HAL_GPIO_Init+0x2a8>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d869      	bhi.n	80007be <HAL_GPIO_Init+0x12e>
 80006ea:	4a94      	ldr	r2, [pc, #592]	@ (800093c <HAL_GPIO_Init+0x2ac>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d04c      	beq.n	800078a <HAL_GPIO_Init+0xfa>
 80006f0:	4a92      	ldr	r2, [pc, #584]	@ (800093c <HAL_GPIO_Init+0x2ac>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d863      	bhi.n	80007be <HAL_GPIO_Init+0x12e>
 80006f6:	4a92      	ldr	r2, [pc, #584]	@ (8000940 <HAL_GPIO_Init+0x2b0>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d046      	beq.n	800078a <HAL_GPIO_Init+0xfa>
 80006fc:	4a90      	ldr	r2, [pc, #576]	@ (8000940 <HAL_GPIO_Init+0x2b0>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d85d      	bhi.n	80007be <HAL_GPIO_Init+0x12e>
 8000702:	2b12      	cmp	r3, #18
 8000704:	d82a      	bhi.n	800075c <HAL_GPIO_Init+0xcc>
 8000706:	2b12      	cmp	r3, #18
 8000708:	d859      	bhi.n	80007be <HAL_GPIO_Init+0x12e>
 800070a:	a201      	add	r2, pc, #4	@ (adr r2, 8000710 <HAL_GPIO_Init+0x80>)
 800070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000710:	0800078b 	.word	0x0800078b
 8000714:	08000765 	.word	0x08000765
 8000718:	08000777 	.word	0x08000777
 800071c:	080007b9 	.word	0x080007b9
 8000720:	080007bf 	.word	0x080007bf
 8000724:	080007bf 	.word	0x080007bf
 8000728:	080007bf 	.word	0x080007bf
 800072c:	080007bf 	.word	0x080007bf
 8000730:	080007bf 	.word	0x080007bf
 8000734:	080007bf 	.word	0x080007bf
 8000738:	080007bf 	.word	0x080007bf
 800073c:	080007bf 	.word	0x080007bf
 8000740:	080007bf 	.word	0x080007bf
 8000744:	080007bf 	.word	0x080007bf
 8000748:	080007bf 	.word	0x080007bf
 800074c:	080007bf 	.word	0x080007bf
 8000750:	080007bf 	.word	0x080007bf
 8000754:	0800076d 	.word	0x0800076d
 8000758:	08000781 	.word	0x08000781
 800075c:	4a79      	ldr	r2, [pc, #484]	@ (8000944 <HAL_GPIO_Init+0x2b4>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d013      	beq.n	800078a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000762:	e02c      	b.n	80007be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	623b      	str	r3, [r7, #32]
          break;
 800076a:	e029      	b.n	80007c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	3304      	adds	r3, #4
 8000772:	623b      	str	r3, [r7, #32]
          break;
 8000774:	e024      	b.n	80007c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	68db      	ldr	r3, [r3, #12]
 800077a:	3308      	adds	r3, #8
 800077c:	623b      	str	r3, [r7, #32]
          break;
 800077e:	e01f      	b.n	80007c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	330c      	adds	r3, #12
 8000786:	623b      	str	r3, [r7, #32]
          break;
 8000788:	e01a      	b.n	80007c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	689b      	ldr	r3, [r3, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d102      	bne.n	8000798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000792:	2304      	movs	r3, #4
 8000794:	623b      	str	r3, [r7, #32]
          break;
 8000796:	e013      	b.n	80007c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d105      	bne.n	80007ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007a0:	2308      	movs	r3, #8
 80007a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	69fa      	ldr	r2, [r7, #28]
 80007a8:	611a      	str	r2, [r3, #16]
          break;
 80007aa:	e009      	b.n	80007c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007ac:	2308      	movs	r3, #8
 80007ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	69fa      	ldr	r2, [r7, #28]
 80007b4:	615a      	str	r2, [r3, #20]
          break;
 80007b6:	e003      	b.n	80007c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
          break;
 80007bc:	e000      	b.n	80007c0 <HAL_GPIO_Init+0x130>
          break;
 80007be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	2bff      	cmp	r3, #255	@ 0xff
 80007c4:	d801      	bhi.n	80007ca <HAL_GPIO_Init+0x13a>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	e001      	b.n	80007ce <HAL_GPIO_Init+0x13e>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3304      	adds	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	2bff      	cmp	r3, #255	@ 0xff
 80007d4:	d802      	bhi.n	80007dc <HAL_GPIO_Init+0x14c>
 80007d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	e002      	b.n	80007e2 <HAL_GPIO_Init+0x152>
 80007dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007de:	3b08      	subs	r3, #8
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	210f      	movs	r1, #15
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	43db      	mvns	r3, r3
 80007f2:	401a      	ands	r2, r3
 80007f4:	6a39      	ldr	r1, [r7, #32]
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	fa01 f303 	lsl.w	r3, r1, r3
 80007fc:	431a      	orrs	r2, r3
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 80b1 	beq.w	8000972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000810:	4b4d      	ldr	r3, [pc, #308]	@ (8000948 <HAL_GPIO_Init+0x2b8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a4c      	ldr	r2, [pc, #304]	@ (8000948 <HAL_GPIO_Init+0x2b8>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b4a      	ldr	r3, [pc, #296]	@ (8000948 <HAL_GPIO_Init+0x2b8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000828:	4a48      	ldr	r2, [pc, #288]	@ (800094c <HAL_GPIO_Init+0x2bc>)
 800082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082c:	089b      	lsrs	r3, r3, #2
 800082e:	3302      	adds	r3, #2
 8000830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	220f      	movs	r2, #15
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a40      	ldr	r2, [pc, #256]	@ (8000950 <HAL_GPIO_Init+0x2c0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d013      	beq.n	800087c <HAL_GPIO_Init+0x1ec>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a3f      	ldr	r2, [pc, #252]	@ (8000954 <HAL_GPIO_Init+0x2c4>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d00d      	beq.n	8000878 <HAL_GPIO_Init+0x1e8>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4a3e      	ldr	r2, [pc, #248]	@ (8000958 <HAL_GPIO_Init+0x2c8>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d007      	beq.n	8000874 <HAL_GPIO_Init+0x1e4>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a3d      	ldr	r2, [pc, #244]	@ (800095c <HAL_GPIO_Init+0x2cc>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d101      	bne.n	8000870 <HAL_GPIO_Init+0x1e0>
 800086c:	2303      	movs	r3, #3
 800086e:	e006      	b.n	800087e <HAL_GPIO_Init+0x1ee>
 8000870:	2304      	movs	r3, #4
 8000872:	e004      	b.n	800087e <HAL_GPIO_Init+0x1ee>
 8000874:	2302      	movs	r3, #2
 8000876:	e002      	b.n	800087e <HAL_GPIO_Init+0x1ee>
 8000878:	2301      	movs	r3, #1
 800087a:	e000      	b.n	800087e <HAL_GPIO_Init+0x1ee>
 800087c:	2300      	movs	r3, #0
 800087e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000880:	f002 0203 	and.w	r2, r2, #3
 8000884:	0092      	lsls	r2, r2, #2
 8000886:	4093      	lsls	r3, r2
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4313      	orrs	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800088e:	492f      	ldr	r1, [pc, #188]	@ (800094c <HAL_GPIO_Init+0x2bc>)
 8000890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	3302      	adds	r3, #2
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d006      	beq.n	80008b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	492c      	ldr	r1, [pc, #176]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	608b      	str	r3, [r1, #8]
 80008b4:	e006      	b.n	80008c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	43db      	mvns	r3, r3
 80008be:	4928      	ldr	r1, [pc, #160]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008c0:	4013      	ands	r3, r2
 80008c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d006      	beq.n	80008de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008d0:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008d2:	68da      	ldr	r2, [r3, #12]
 80008d4:	4922      	ldr	r1, [pc, #136]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	60cb      	str	r3, [r1, #12]
 80008dc:	e006      	b.n	80008ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008e0:	68da      	ldr	r2, [r3, #12]
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	43db      	mvns	r3, r3
 80008e6:	491e      	ldr	r1, [pc, #120]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008e8:	4013      	ands	r3, r2
 80008ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d006      	beq.n	8000906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008f8:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	4918      	ldr	r1, [pc, #96]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	4313      	orrs	r3, r2
 8000902:	604b      	str	r3, [r1, #4]
 8000904:	e006      	b.n	8000914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 8000908:	685a      	ldr	r2, [r3, #4]
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	43db      	mvns	r3, r3
 800090e:	4914      	ldr	r1, [pc, #80]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 8000910:	4013      	ands	r3, r2
 8000912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800091c:	2b00      	cmp	r3, #0
 800091e:	d021      	beq.n	8000964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	490e      	ldr	r1, [pc, #56]	@ (8000960 <HAL_GPIO_Init+0x2d0>)
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	4313      	orrs	r3, r2
 800092a:	600b      	str	r3, [r1, #0]
 800092c:	e021      	b.n	8000972 <HAL_GPIO_Init+0x2e2>
 800092e:	bf00      	nop
 8000930:	10320000 	.word	0x10320000
 8000934:	10310000 	.word	0x10310000
 8000938:	10220000 	.word	0x10220000
 800093c:	10210000 	.word	0x10210000
 8000940:	10120000 	.word	0x10120000
 8000944:	10110000 	.word	0x10110000
 8000948:	40021000 	.word	0x40021000
 800094c:	40010000 	.word	0x40010000
 8000950:	40010800 	.word	0x40010800
 8000954:	40010c00 	.word	0x40010c00
 8000958:	40011000 	.word	0x40011000
 800095c:	40011400 	.word	0x40011400
 8000960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000964:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <HAL_GPIO_Init+0x304>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	43db      	mvns	r3, r3
 800096c:	4909      	ldr	r1, [pc, #36]	@ (8000994 <HAL_GPIO_Init+0x304>)
 800096e:	4013      	ands	r3, r2
 8000970:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000974:	3301      	adds	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800097e:	fa22 f303 	lsr.w	r3, r2, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	f47f ae8e 	bne.w	80006a4 <HAL_GPIO_Init+0x14>
  }
}
 8000988:	bf00      	nop
 800098a:	bf00      	nop
 800098c:	372c      	adds	r7, #44	@ 0x2c
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40010400 	.word	0x40010400

08000998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	807b      	strh	r3, [r7, #2]
 80009a4:	4613      	mov	r3, r2
 80009a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009a8:	787b      	ldrb	r3, [r7, #1]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d003      	beq.n	80009b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009ae:	887a      	ldrh	r2, [r7, #2]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009b4:	e003      	b.n	80009be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009b6:	887b      	ldrh	r3, [r7, #2]
 80009b8:	041a      	lsls	r2, r3, #16
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	611a      	str	r2, [r3, #16]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d101      	bne.n	80009da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e272      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f000 8087 	beq.w	8000af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009e8:	4b92      	ldr	r3, [pc, #584]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 030c 	and.w	r3, r3, #12
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d00c      	beq.n	8000a0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009f4:	4b8f      	ldr	r3, [pc, #572]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 030c 	and.w	r3, r3, #12
 80009fc:	2b08      	cmp	r3, #8
 80009fe:	d112      	bne.n	8000a26 <HAL_RCC_OscConfig+0x5e>
 8000a00:	4b8c      	ldr	r3, [pc, #560]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a0c:	d10b      	bne.n	8000a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a0e:	4b89      	ldr	r3, [pc, #548]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d06c      	beq.n	8000af4 <HAL_RCC_OscConfig+0x12c>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d168      	bne.n	8000af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e24c      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a2e:	d106      	bne.n	8000a3e <HAL_RCC_OscConfig+0x76>
 8000a30:	4b80      	ldr	r3, [pc, #512]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a7f      	ldr	r2, [pc, #508]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	e02e      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10c      	bne.n	8000a60 <HAL_RCC_OscConfig+0x98>
 8000a46:	4b7b      	ldr	r3, [pc, #492]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a7a      	ldr	r2, [pc, #488]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	4b78      	ldr	r3, [pc, #480]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a77      	ldr	r2, [pc, #476]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	e01d      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000a68:	d10c      	bne.n	8000a84 <HAL_RCC_OscConfig+0xbc>
 8000a6a:	4b72      	ldr	r3, [pc, #456]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a71      	ldr	r2, [pc, #452]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	4b6f      	ldr	r3, [pc, #444]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e00b      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
 8000a84:	4b6b      	ldr	r3, [pc, #428]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a6a      	ldr	r2, [pc, #424]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b68      	ldr	r3, [pc, #416]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a67      	ldr	r2, [pc, #412]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fce2 	bl	800046c <HAL_GetTick>
 8000aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aaa:	e008      	b.n	8000abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aac:	f7ff fcde 	bl	800046c <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b64      	cmp	r3, #100	@ 0x64
 8000ab8:	d901      	bls.n	8000abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e200      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000abe:	4b5d      	ldr	r3, [pc, #372]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f0      	beq.n	8000aac <HAL_RCC_OscConfig+0xe4>
 8000aca:	e014      	b.n	8000af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000acc:	f7ff fcce 	bl	800046c <HAL_GetTick>
 8000ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ad2:	e008      	b.n	8000ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ad4:	f7ff fcca 	bl	800046c <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2b64      	cmp	r3, #100	@ 0x64
 8000ae0:	d901      	bls.n	8000ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e1ec      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ae6:	4b53      	ldr	r3, [pc, #332]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1f0      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x10c>
 8000af2:	e000      	b.n	8000af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d063      	beq.n	8000bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b02:	4b4c      	ldr	r3, [pc, #304]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 030c 	and.w	r3, r3, #12
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00b      	beq.n	8000b26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b0e:	4b49      	ldr	r3, [pc, #292]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 030c 	and.w	r3, r3, #12
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d11c      	bne.n	8000b54 <HAL_RCC_OscConfig+0x18c>
 8000b1a:	4b46      	ldr	r3, [pc, #280]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d116      	bne.n	8000b54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b26:	4b43      	ldr	r3, [pc, #268]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d005      	beq.n	8000b3e <HAL_RCC_OscConfig+0x176>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d001      	beq.n	8000b3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e1c0      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	4939      	ldr	r1, [pc, #228]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b52:	e03a      	b.n	8000bca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d020      	beq.n	8000b9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b5c:	4b36      	ldr	r3, [pc, #216]	@ (8000c38 <HAL_RCC_OscConfig+0x270>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b62:	f7ff fc83 	bl	800046c <HAL_GetTick>
 8000b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b68:	e008      	b.n	8000b7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b6a:	f7ff fc7f 	bl	800046c <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e1a1      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0f0      	beq.n	8000b6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b88:	4b2a      	ldr	r3, [pc, #168]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	4927      	ldr	r1, [pc, #156]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	600b      	str	r3, [r1, #0]
 8000b9c:	e015      	b.n	8000bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <HAL_RCC_OscConfig+0x270>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fc62 	bl	800046c <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bac:	f7ff fc5e 	bl	800046c <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e180      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f0      	bne.n	8000bac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d03a      	beq.n	8000c4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	699b      	ldr	r3, [r3, #24]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d019      	beq.n	8000c12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <HAL_RCC_OscConfig+0x274>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000be4:	f7ff fc42 	bl	800046c <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bec:	f7ff fc3e 	bl	800046c <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e160      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f0      	beq.n	8000bec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 fa9c 	bl	8001148 <RCC_Delay>
 8000c10:	e01c      	b.n	8000c4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_RCC_OscConfig+0x274>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c18:	f7ff fc28 	bl	800046c <HAL_GetTick>
 8000c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c1e:	e00f      	b.n	8000c40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c20:	f7ff fc24 	bl	800046c <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d908      	bls.n	8000c40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e146      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	42420000 	.word	0x42420000
 8000c3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c40:	4b92      	ldr	r3, [pc, #584]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1e9      	bne.n	8000c20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 80a6 	beq.w	8000da6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10d      	bne.n	8000c86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b88      	ldr	r3, [pc, #544]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a87      	ldr	r2, [pc, #540]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b85      	ldr	r3, [pc, #532]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c82:	2301      	movs	r3, #1
 8000c84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c86:	4b82      	ldr	r3, [pc, #520]	@ (8000e90 <HAL_RCC_OscConfig+0x4c8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d118      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c92:	4b7f      	ldr	r3, [pc, #508]	@ (8000e90 <HAL_RCC_OscConfig+0x4c8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a7e      	ldr	r2, [pc, #504]	@ (8000e90 <HAL_RCC_OscConfig+0x4c8>)
 8000c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c9e:	f7ff fbe5 	bl	800046c <HAL_GetTick>
 8000ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca4:	e008      	b.n	8000cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ca6:	f7ff fbe1 	bl	800046c <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b64      	cmp	r3, #100	@ 0x64
 8000cb2:	d901      	bls.n	8000cb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e103      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb8:	4b75      	ldr	r3, [pc, #468]	@ (8000e90 <HAL_RCC_OscConfig+0x4c8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0f0      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d106      	bne.n	8000cda <HAL_RCC_OscConfig+0x312>
 8000ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000cce:	6a1b      	ldr	r3, [r3, #32]
 8000cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6213      	str	r3, [r2, #32]
 8000cd8:	e02d      	b.n	8000d36 <HAL_RCC_OscConfig+0x36e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0x334>
 8000ce2:	4b6a      	ldr	r3, [pc, #424]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000ce4:	6a1b      	ldr	r3, [r3, #32]
 8000ce6:	4a69      	ldr	r2, [pc, #420]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000ce8:	f023 0301 	bic.w	r3, r3, #1
 8000cec:	6213      	str	r3, [r2, #32]
 8000cee:	4b67      	ldr	r3, [pc, #412]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	4a66      	ldr	r2, [pc, #408]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000cf4:	f023 0304 	bic.w	r3, r3, #4
 8000cf8:	6213      	str	r3, [r2, #32]
 8000cfa:	e01c      	b.n	8000d36 <HAL_RCC_OscConfig+0x36e>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	2b05      	cmp	r3, #5
 8000d02:	d10c      	bne.n	8000d1e <HAL_RCC_OscConfig+0x356>
 8000d04:	4b61      	ldr	r3, [pc, #388]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	4a60      	ldr	r2, [pc, #384]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6213      	str	r3, [r2, #32]
 8000d10:	4b5e      	ldr	r3, [pc, #376]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	4a5d      	ldr	r2, [pc, #372]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6213      	str	r3, [r2, #32]
 8000d1c:	e00b      	b.n	8000d36 <HAL_RCC_OscConfig+0x36e>
 8000d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d20:	6a1b      	ldr	r3, [r3, #32]
 8000d22:	4a5a      	ldr	r2, [pc, #360]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d24:	f023 0301 	bic.w	r3, r3, #1
 8000d28:	6213      	str	r3, [r2, #32]
 8000d2a:	4b58      	ldr	r3, [pc, #352]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d2c:	6a1b      	ldr	r3, [r3, #32]
 8000d2e:	4a57      	ldr	r2, [pc, #348]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d30:	f023 0304 	bic.w	r3, r3, #4
 8000d34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d015      	beq.n	8000d6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fb95 	bl	800046c <HAL_GetTick>
 8000d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d44:	e00a      	b.n	8000d5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d46:	f7ff fb91 	bl	800046c <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e0b1      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0ee      	beq.n	8000d46 <HAL_RCC_OscConfig+0x37e>
 8000d68:	e014      	b.n	8000d94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d6a:	f7ff fb7f 	bl	800046c <HAL_GetTick>
 8000d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d70:	e00a      	b.n	8000d88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d72:	f7ff fb7b 	bl	800046c <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e09b      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d88:	4b40      	ldr	r3, [pc, #256]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1ee      	bne.n	8000d72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000d94:	7dfb      	ldrb	r3, [r7, #23]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d105      	bne.n	8000da6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8087 	beq.w	8000ebe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000db0:	4b36      	ldr	r3, [pc, #216]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b08      	cmp	r3, #8
 8000dba:	d061      	beq.n	8000e80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d146      	bne.n	8000e52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dc4:	4b33      	ldr	r3, [pc, #204]	@ (8000e94 <HAL_RCC_OscConfig+0x4cc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dca:	f7ff fb4f 	bl	800046c <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd0:	e008      	b.n	8000de4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dd2:	f7ff fb4b 	bl	800046c <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e06d      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f0      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000df8:	d108      	bne.n	8000e0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000dfa:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	4921      	ldr	r1, [pc, #132]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a19      	ldr	r1, [r3, #32]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	491b      	ldr	r1, [pc, #108]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000e20:	4313      	orrs	r3, r2
 8000e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <HAL_RCC_OscConfig+0x4cc>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fb1f 	bl	800046c <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e32:	f7ff fb1b 	bl	800046c <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e03d      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x46a>
 8000e50:	e035      	b.n	8000ebe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <HAL_RCC_OscConfig+0x4cc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fb08 	bl	800046c <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e60:	f7ff fb04 	bl	800046c <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e026      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x498>
 8000e7e:	e01e      	b.n	8000ebe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d107      	bne.n	8000e98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e019      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40007000 	.word	0x40007000
 8000e94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000e98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <HAL_RCC_OscConfig+0x500>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d106      	bne.n	8000eba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d001      	beq.n	8000ebe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e0d0      	b.n	8001082 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800108c <HAL_RCC_ClockConfig+0x1c0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	683a      	ldr	r2, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d910      	bls.n	8000f10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eee:	4b67      	ldr	r3, [pc, #412]	@ (800108c <HAL_RCC_ClockConfig+0x1c0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f023 0207 	bic.w	r2, r3, #7
 8000ef6:	4965      	ldr	r1, [pc, #404]	@ (800108c <HAL_RCC_ClockConfig+0x1c0>)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000efe:	4b63      	ldr	r3, [pc, #396]	@ (800108c <HAL_RCC_ClockConfig+0x1c0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d001      	beq.n	8000f10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e0b8      	b.n	8001082 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d020      	beq.n	8000f5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d005      	beq.n	8000f34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f28:	4b59      	ldr	r3, [pc, #356]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	4a58      	ldr	r2, [pc, #352]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000f2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d005      	beq.n	8000f4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f40:	4b53      	ldr	r3, [pc, #332]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a52      	ldr	r2, [pc, #328]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000f46:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000f4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f4c:	4b50      	ldr	r3, [pc, #320]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	494d      	ldr	r1, [pc, #308]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d040      	beq.n	8000fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d107      	bne.n	8000f82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	4b47      	ldr	r3, [pc, #284]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d115      	bne.n	8000faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e07f      	b.n	8001082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d107      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8a:	4b41      	ldr	r3, [pc, #260]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d109      	bne.n	8000faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e073      	b.n	8001082 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e06b      	b.n	8001082 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000faa:	4b39      	ldr	r3, [pc, #228]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f023 0203 	bic.w	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4936      	ldr	r1, [pc, #216]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fbc:	f7ff fa56 	bl	800046c <HAL_GetTick>
 8000fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fc2:	e00a      	b.n	8000fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc4:	f7ff fa52 	bl	800046c <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e053      	b.n	8001082 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fda:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 020c 	and.w	r2, r3, #12
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d1eb      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HAL_RCC_ClockConfig+0x1c0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d210      	bcs.n	800101c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ffa:	4b24      	ldr	r3, [pc, #144]	@ (800108c <HAL_RCC_ClockConfig+0x1c0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 0207 	bic.w	r2, r3, #7
 8001002:	4922      	ldr	r1, [pc, #136]	@ (800108c <HAL_RCC_ClockConfig+0x1c0>)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	4313      	orrs	r3, r2
 8001008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <HAL_RCC_ClockConfig+0x1c0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	429a      	cmp	r2, r3
 8001016:	d001      	beq.n	800101c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e032      	b.n	8001082 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	4916      	ldr	r1, [pc, #88]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8001036:	4313      	orrs	r3, r2
 8001038:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	2b00      	cmp	r3, #0
 8001044:	d009      	beq.n	800105a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	490e      	ldr	r1, [pc, #56]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8001056:	4313      	orrs	r3, r2
 8001058:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800105a:	f000 f821 	bl	80010a0 <HAL_RCC_GetSysClockFreq>
 800105e:	4602      	mov	r2, r0
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	490a      	ldr	r1, [pc, #40]	@ (8001094 <HAL_RCC_ClockConfig+0x1c8>)
 800106c:	5ccb      	ldrb	r3, [r1, r3]
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <HAL_RCC_ClockConfig+0x1cc>)
 8001074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <HAL_RCC_ClockConfig+0x1d0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9b4 	bl	80003e8 <HAL_InitTick>

  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40022000 	.word	0x40022000
 8001090:	40021000 	.word	0x40021000
 8001094:	080011f4 	.word	0x080011f4
 8001098:	20000000 	.word	0x20000000
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b087      	sub	sp, #28
 80010a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <HAL_RCC_GetSysClockFreq+0x94>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d002      	beq.n	80010d0 <HAL_RCC_GetSysClockFreq+0x30>
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d003      	beq.n	80010d6 <HAL_RCC_GetSysClockFreq+0x36>
 80010ce:	e027      	b.n	8001120 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_RCC_GetSysClockFreq+0x98>)
 80010d2:	613b      	str	r3, [r7, #16]
      break;
 80010d4:	e027      	b.n	8001126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	0c9b      	lsrs	r3, r3, #18
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <HAL_RCC_GetSysClockFreq+0x9c>)
 80010e0:	5cd3      	ldrb	r3, [r2, r3]
 80010e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d010      	beq.n	8001110 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80010ee:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <HAL_RCC_GetSysClockFreq+0x94>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	0c5b      	lsrs	r3, r3, #17
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	4a11      	ldr	r2, [pc, #68]	@ (8001140 <HAL_RCC_GetSysClockFreq+0xa0>)
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <HAL_RCC_GetSysClockFreq+0x98>)
 8001102:	fb03 f202 	mul.w	r2, r3, r2
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	fbb2 f3f3 	udiv	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e004      	b.n	800111a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a0c      	ldr	r2, [pc, #48]	@ (8001144 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	613b      	str	r3, [r7, #16]
      break;
 800111e:	e002      	b.n	8001126 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_RCC_GetSysClockFreq+0x98>)
 8001122:	613b      	str	r3, [r7, #16]
      break;
 8001124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001126:	693b      	ldr	r3, [r7, #16]
}
 8001128:	4618      	mov	r0, r3
 800112a:	371c      	adds	r7, #28
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	007a1200 	.word	0x007a1200
 800113c:	08001204 	.word	0x08001204
 8001140:	08001214 	.word	0x08001214
 8001144:	003d0900 	.word	0x003d0900

08001148 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001150:	4b0a      	ldr	r3, [pc, #40]	@ (800117c <RCC_Delay+0x34>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <RCC_Delay+0x38>)
 8001156:	fba2 2303 	umull	r2, r3, r2, r3
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001164:	bf00      	nop
  }
  while (Delay --);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1e5a      	subs	r2, r3, #1
 800116a:	60fa      	str	r2, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f9      	bne.n	8001164 <RCC_Delay+0x1c>
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	20000000 	.word	0x20000000
 8001180:	10624dd3 	.word	0x10624dd3

08001184 <memset>:
 8001184:	4603      	mov	r3, r0
 8001186:	4402      	add	r2, r0
 8001188:	4293      	cmp	r3, r2
 800118a:	d100      	bne.n	800118e <memset+0xa>
 800118c:	4770      	bx	lr
 800118e:	f803 1b01 	strb.w	r1, [r3], #1
 8001192:	e7f9      	b.n	8001188 <memset+0x4>

08001194 <__libc_init_array>:
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	2600      	movs	r6, #0
 8001198:	4d0c      	ldr	r5, [pc, #48]	@ (80011cc <__libc_init_array+0x38>)
 800119a:	4c0d      	ldr	r4, [pc, #52]	@ (80011d0 <__libc_init_array+0x3c>)
 800119c:	1b64      	subs	r4, r4, r5
 800119e:	10a4      	asrs	r4, r4, #2
 80011a0:	42a6      	cmp	r6, r4
 80011a2:	d109      	bne.n	80011b8 <__libc_init_array+0x24>
 80011a4:	f000 f81a 	bl	80011dc <_init>
 80011a8:	2600      	movs	r6, #0
 80011aa:	4d0a      	ldr	r5, [pc, #40]	@ (80011d4 <__libc_init_array+0x40>)
 80011ac:	4c0a      	ldr	r4, [pc, #40]	@ (80011d8 <__libc_init_array+0x44>)
 80011ae:	1b64      	subs	r4, r4, r5
 80011b0:	10a4      	asrs	r4, r4, #2
 80011b2:	42a6      	cmp	r6, r4
 80011b4:	d105      	bne.n	80011c2 <__libc_init_array+0x2e>
 80011b6:	bd70      	pop	{r4, r5, r6, pc}
 80011b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80011bc:	4798      	blx	r3
 80011be:	3601      	adds	r6, #1
 80011c0:	e7ee      	b.n	80011a0 <__libc_init_array+0xc>
 80011c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c6:	4798      	blx	r3
 80011c8:	3601      	adds	r6, #1
 80011ca:	e7f2      	b.n	80011b2 <__libc_init_array+0x1e>
 80011cc:	08001218 	.word	0x08001218
 80011d0:	08001218 	.word	0x08001218
 80011d4:	08001218 	.word	0x08001218
 80011d8:	0800121c 	.word	0x0800121c

080011dc <_init>:
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	bf00      	nop
 80011e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e2:	bc08      	pop	{r3}
 80011e4:	469e      	mov	lr, r3
 80011e6:	4770      	bx	lr

080011e8 <_fini>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	bf00      	nop
 80011ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ee:	bc08      	pop	{r3}
 80011f0:	469e      	mov	lr, r3
 80011f2:	4770      	bx	lr
