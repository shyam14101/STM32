
LCD_COUNT_DISP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000046c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800059c  0800059c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800059c  0800059c  00002010  2**0
                  CONTENTS
  4 .ARM          00000000  0800059c  0800059c  00002010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800059c  0800059c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800059c  0800059c  0000159c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005a0  080005a0  000015a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080005a4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  080005b4  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080005b4  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000596  00000000  00000000  00002039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000032c  00000000  00000000  000025cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000072  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010024  00000000  00000000  00002a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000dd4  00000000  00000000  00012a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000545e3  00000000  00000000  00013812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067df5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b0  00000000  00000000  00067e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00067fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000584 	.word	0x08000584

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000584 	.word	0x08000584

08000170 <main>:
// read btn state
uint8_t read_btnstate();



int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	SystemInit();
 8000176:	f000 f9b1 	bl	80004dc <SystemInit>
	lcdInit();
 800017a:	f000 f84d 	bl	8000218 <lcdInit>
	btnInit();
 800017e:	f000 f94d 	bl	800041c <btnInit>

	lcdCommand(0x30);
 8000182:	2030      	movs	r0, #48	@ 0x30
 8000184:	f000 f8fe 	bl	8000384 <lcdCommand>
	lcdCommand(0x30);
 8000188:	2030      	movs	r0, #48	@ 0x30
 800018a:	f000 f8fb 	bl	8000384 <lcdCommand>
	lcdCommand(0x30);
 800018e:	2030      	movs	r0, #48	@ 0x30
 8000190:	f000 f8f8 	bl	8000384 <lcdCommand>
	lcdCommand(0x0C);
 8000194:	200c      	movs	r0, #12
 8000196:	f000 f8f5 	bl	8000384 <lcdCommand>
	lcdCommand(0x0F);
 800019a:	200f      	movs	r0, #15
 800019c:	f000 f8f2 	bl	8000384 <lcdCommand>
	lcdCommand(0x0E);
 80001a0:	200e      	movs	r0, #14
 80001a2:	f000 f8ef 	bl	8000384 <lcdCommand>
	lcdCommand(0x01);
 80001a6:	2001      	movs	r0, #1
 80001a8:	f000 f8ec 	bl	8000384 <lcdCommand>
	lcdCommand(0x10);
 80001ac:	2010      	movs	r0, #16
 80001ae:	f000 f8e9 	bl	8000384 <lcdCommand>


	uint16_t i = 0;
 80001b2:	2300      	movs	r3, #0
 80001b4:	80fb      	strh	r3, [r7, #6]


	while(1){
		lcdCommand(0x80);
 80001b6:	2080      	movs	r0, #128	@ 0x80
 80001b8:	f000 f8e4 	bl	8000384 <lcdCommand>


		uint8_t btnstate = read_btnstate();
 80001bc:	f000 f956 	bl	800046c <read_btnstate>
 80001c0:	4603      	mov	r3, r0
 80001c2:	717b      	strb	r3, [r7, #5]


			if (btnstate & 0x02) {
 80001c4:	797b      	ldrb	r3, [r7, #5]
 80001c6:	f003 0302 	and.w	r3, r3, #2
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d00c      	beq.n	80001e8 <main+0x78>
				// Button 2 (PA1) is pressed
				i--;
 80001ce:	88fb      	ldrh	r3, [r7, #6]
 80001d0:	3b01      	subs	r3, #1
 80001d2:	80fb      	strh	r3, [r7, #6]
				lcdCommand(0x10);
 80001d4:	2010      	movs	r0, #16
 80001d6:	f000 f8d5 	bl	8000384 <lcdCommand>
				lcdPrint(i + 48);
 80001da:	88fb      	ldrh	r3, [r7, #6]
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	3330      	adds	r3, #48	@ 0x30
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f892 	bl	800030c <lcdPrint>

			}

			if (btnstate & 0x01) {
 80001e8:	797b      	ldrb	r3, [r7, #5]
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d00a      	beq.n	8000208 <main+0x98>
				// Button 1 (PA0) is pressed
				i++;
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	3301      	adds	r3, #1
 80001f6:	80fb      	strh	r3, [r7, #6]

				lcdPrint(i + 48);
 80001f8:	88fb      	ldrh	r3, [r7, #6]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	3330      	adds	r3, #48	@ 0x30
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f883 	bl	800030c <lcdPrint>
 8000206:	e7d6      	b.n	80001b6 <main+0x46>


			} else {

				lcdPrint(i + 48);
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	b2db      	uxtb	r3, r3
 800020c:	3330      	adds	r3, #48	@ 0x30
 800020e:	b2db      	uxtb	r3, r3
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f87b 	bl	800030c <lcdPrint>
	while(1){
 8000216:	e7ce      	b.n	80001b6 <main+0x46>

08000218 <lcdInit>:


	}
}
//complete lcd functions
void lcdInit(){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0

	// clock init
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN ;
 800021e:	4b38      	ldr	r3, [pc, #224]	@ (8000300 <lcdInit+0xe8>)
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	4a37      	ldr	r2, [pc, #220]	@ (8000300 <lcdInit+0xe8>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6193      	str	r3, [r2, #24]
	if(lcd_RS < 8){
		lcd_port->CRL &= ~(0xF << (4 * lcd_RS) );
		lcd_port->CRL |=  (0x2 << (4 * lcd_RS ));
	}
	else{
		lcd_port->CRH &= ~(0xF << (4 * ( lcd_RS - 8)));
 800022a:	4b36      	ldr	r3, [pc, #216]	@ (8000304 <lcdInit+0xec>)
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	4a35      	ldr	r2, [pc, #212]	@ (8000304 <lcdInit+0xec>)
 8000230:	f023 030f 	bic.w	r3, r3, #15
 8000234:	6053      	str	r3, [r2, #4]
		lcd_port->CRH |=  (0x2 << (4 * ( lcd_RS - 8)));
 8000236:	4b33      	ldr	r3, [pc, #204]	@ (8000304 <lcdInit+0xec>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	4a32      	ldr	r2, [pc, #200]	@ (8000304 <lcdInit+0xec>)
 800023c:	f043 0302 	orr.w	r3, r3, #2
 8000240:	6053      	str	r3, [r2, #4]
	if(lcd_EN < 8){
		lcd_port->CRL &= ~(0xF << (4 * lcd_EN) );
		lcd_port->CRL |=  (0x2 << (4 * lcd_EN) );
	}
	else{
		lcd_port->CRH &= ~(0xF << (4 * ( lcd_EN - 8)));
 8000242:	4b30      	ldr	r3, [pc, #192]	@ (8000304 <lcdInit+0xec>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	4a2f      	ldr	r2, [pc, #188]	@ (8000304 <lcdInit+0xec>)
 8000248:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800024c:	6053      	str	r3, [r2, #4]
		lcd_port->CRH |=  (0x2 << (4 * ( lcd_EN - 8)));
 800024e:	4b2d      	ldr	r3, [pc, #180]	@ (8000304 <lcdInit+0xec>)
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	4a2c      	ldr	r2, [pc, #176]	@ (8000304 <lcdInit+0xec>)
 8000254:	f043 0320 	orr.w	r3, r3, #32
 8000258:	6053      	str	r3, [r2, #4]
	}
	// configure pins
	for(int i = 0; i < 8; i++){
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	e045      	b.n	80002ec <lcdInit+0xd4>
		if(data[i] < 8){
 8000260:	4a29      	ldr	r2, [pc, #164]	@ (8000308 <lcdInit+0xf0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000268:	2b07      	cmp	r3, #7
 800026a:	d81d      	bhi.n	80002a8 <lcdInit+0x90>
			lcd_port->CRL &= ~(0xF << (4 * data[i]));
 800026c:	4b25      	ldr	r3, [pc, #148]	@ (8000304 <lcdInit+0xec>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4925      	ldr	r1, [pc, #148]	@ (8000308 <lcdInit+0xf0>)
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000278:	0092      	lsls	r2, r2, #2
 800027a:	210f      	movs	r1, #15
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	43d2      	mvns	r2, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a1f      	ldr	r2, [pc, #124]	@ (8000304 <lcdInit+0xec>)
 8000286:	400b      	ands	r3, r1
 8000288:	6013      	str	r3, [r2, #0]
			lcd_port->CRL |=  (0x2 << (4 * data[i]));
 800028a:	4b1e      	ldr	r3, [pc, #120]	@ (8000304 <lcdInit+0xec>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	491e      	ldr	r1, [pc, #120]	@ (8000308 <lcdInit+0xf0>)
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000296:	0092      	lsls	r2, r2, #2
 8000298:	2102      	movs	r1, #2
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	4611      	mov	r1, r2
 80002a0:	4a18      	ldr	r2, [pc, #96]	@ (8000304 <lcdInit+0xec>)
 80002a2:	430b      	orrs	r3, r1
 80002a4:	6013      	str	r3, [r2, #0]
 80002a6:	e01e      	b.n	80002e6 <lcdInit+0xce>

		}
		else{
			lcd_port->CRH &= ~(0xF << (4 * (data[i] - 8)));
 80002a8:	4b16      	ldr	r3, [pc, #88]	@ (8000304 <lcdInit+0xec>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4916      	ldr	r1, [pc, #88]	@ (8000308 <lcdInit+0xf0>)
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80002b4:	3a08      	subs	r2, #8
 80002b6:	0092      	lsls	r2, r2, #2
 80002b8:	210f      	movs	r1, #15
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	43d2      	mvns	r2, r2
 80002c0:	4611      	mov	r1, r2
 80002c2:	4a10      	ldr	r2, [pc, #64]	@ (8000304 <lcdInit+0xec>)
 80002c4:	400b      	ands	r3, r1
 80002c6:	6053      	str	r3, [r2, #4]
			lcd_port->CRH |=  (0x2 << (4 * (data[i] - 8)));
 80002c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <lcdInit+0xec>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	490e      	ldr	r1, [pc, #56]	@ (8000308 <lcdInit+0xf0>)
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80002d4:	3a08      	subs	r2, #8
 80002d6:	0092      	lsls	r2, r2, #2
 80002d8:	2102      	movs	r1, #2
 80002da:	fa01 f202 	lsl.w	r2, r1, r2
 80002de:	4611      	mov	r1, r2
 80002e0:	4a08      	ldr	r2, [pc, #32]	@ (8000304 <lcdInit+0xec>)
 80002e2:	430b      	orrs	r3, r1
 80002e4:	6053      	str	r3, [r2, #4]
	for(int i = 0; i < 8; i++){
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3301      	adds	r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b07      	cmp	r3, #7
 80002f0:	ddb6      	ble.n	8000260 <lcdInit+0x48>
		}
	}
}
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40021000 	.word	0x40021000
 8000304:	40010800 	.word	0x40010800
 8000308:	20000000 	.word	0x20000000

0800030c <lcdPrint>:

void lcdPrint(uint8_t input){
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
	//rs ==1
	lcd_port->BSRR = (1 << lcd_RS);
 8000316:	4b19      	ldr	r3, [pc, #100]	@ (800037c <lcdPrint+0x70>)
 8000318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800031c:	611a      	str	r2, [r3, #16]
	//set data pins
	for (int i = 0; i < 8; i++) {
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e01e      	b.n	8000362 <lcdPrint+0x56>
		if (input & (1 << i)) {
 8000324:	79fa      	ldrb	r2, [r7, #7]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	fa42 f303 	asr.w	r3, r2, r3
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d00a      	beq.n	800034a <lcdPrint+0x3e>
			lcd_port->BSRR = (1 << data[i]);
 8000334:	4a12      	ldr	r2, [pc, #72]	@ (8000380 <lcdPrint+0x74>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800033c:	461a      	mov	r2, r3
 800033e:	2301      	movs	r3, #1
 8000340:	fa03 f202 	lsl.w	r2, r3, r2
 8000344:	4b0d      	ldr	r3, [pc, #52]	@ (800037c <lcdPrint+0x70>)
 8000346:	611a      	str	r2, [r3, #16]
 8000348:	e008      	b.n	800035c <lcdPrint+0x50>
		} else {
			lcd_port->BSRR = (1 << (data[i] + 16));
 800034a:	4a0d      	ldr	r2, [pc, #52]	@ (8000380 <lcdPrint+0x74>)
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000352:	3310      	adds	r3, #16
 8000354:	2201      	movs	r2, #1
 8000356:	409a      	lsls	r2, r3
 8000358:	4b08      	ldr	r3, [pc, #32]	@ (800037c <lcdPrint+0x70>)
 800035a:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < 8; i++) {
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	3301      	adds	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	2b07      	cmp	r3, #7
 8000366:	dddd      	ble.n	8000324 <lcdPrint+0x18>
		}
	}
	//call lcd enable
	lcdEnable();
 8000368:	f000 f844 	bl	80003f4 <lcdEnable>
	Delay(6);
 800036c:	2006      	movs	r0, #6
 800036e:	f000 f89d 	bl	80004ac <Delay>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010800 	.word	0x40010800
 8000380:	20000000 	.word	0x20000000

08000384 <lcdCommand>:

void lcdCommand(uint8_t cmd){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
	// rs = 0
	lcd_port->BSRR = (1 << (lcd_RS +16));
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <lcdCommand+0x68>)
 8000390:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000394:	611a      	str	r2, [r3, #16]
	//set data pins
	 for (int i = 0; i < 8; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
 800039a:	e01e      	b.n	80003da <lcdCommand+0x56>
		if (cmd & (1 << i)) {
 800039c:	79fa      	ldrb	r2, [r7, #7]
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	fa42 f303 	asr.w	r3, r2, r3
 80003a4:	f003 0301 	and.w	r3, r3, #1
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d00a      	beq.n	80003c2 <lcdCommand+0x3e>
			lcd_port->BSRR = (1 << data[i]);
 80003ac:	4a10      	ldr	r2, [pc, #64]	@ (80003f0 <lcdCommand+0x6c>)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003b4:	461a      	mov	r2, r3
 80003b6:	2301      	movs	r3, #1
 80003b8:	fa03 f202 	lsl.w	r2, r3, r2
 80003bc:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <lcdCommand+0x68>)
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	e008      	b.n	80003d4 <lcdCommand+0x50>
		} else {
			lcd_port->BSRR = (1 << (data[i] + 16));
 80003c2:	4a0b      	ldr	r2, [pc, #44]	@ (80003f0 <lcdCommand+0x6c>)
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003ca:	3310      	adds	r3, #16
 80003cc:	2201      	movs	r2, #1
 80003ce:	409a      	lsls	r2, r3
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <lcdCommand+0x68>)
 80003d2:	611a      	str	r2, [r3, #16]
	 for (int i = 0; i < 8; i++) {
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2b07      	cmp	r3, #7
 80003de:	dddd      	ble.n	800039c <lcdCommand+0x18>
		}
	}
	lcdEnable();
 80003e0:	f000 f808 	bl	80003f4 <lcdEnable>

}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40010800 	.word	0x40010800
 80003f0:	20000000 	.word	0x20000000

080003f4 <lcdEnable>:

void lcdEnable(void){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0

	lcd_port->BSRR = (1 << lcd_EN);
 80003f8:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <lcdEnable+0x24>)
 80003fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003fe:	611a      	str	r2, [r3, #16]
	Delay(1);
 8000400:	2001      	movs	r0, #1
 8000402:	f000 f853 	bl	80004ac <Delay>
	lcd_port->BSRR = (1 << (lcd_EN +16));
 8000406:	4b04      	ldr	r3, [pc, #16]	@ (8000418 <lcdEnable+0x24>)
 8000408:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800040c:	611a      	str	r2, [r3, #16]
	Delay(1);
 800040e:	2001      	movs	r0, #1
 8000410:	f000 f84c 	bl	80004ac <Delay>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40010800 	.word	0x40010800

0800041c <btnInit>:

//complete btn function
void btnInit(){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000420:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <btnInit+0x48>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a0f      	ldr	r2, [pc, #60]	@ (8000464 <btnInit+0x48>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]

	//PORTB0
	if(btn_B0 < 8){
		btn_port->CRL &= ~(0xF << (4 * btn_B0) );
 800042c:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <btnInit+0x4c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <btnInit+0x4c>)
 8000432:	f023 030f 	bic.w	r3, r3, #15
 8000436:	6013      	str	r3, [r2, #0]
		btn_port->CRL |=  (0x8 << (4 * btn_B0 ));
 8000438:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <btnInit+0x4c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <btnInit+0x4c>)
 800043e:	f043 0308 	orr.w	r3, r3, #8
 8000442:	6013      	str	r3, [r2, #0]
		btn_port->CRH &= ~(0xF << (4 * ( btn_B0 - 8)));
		btn_port->CRH |=  (0x8 << (4 * ( btn_B0 - 8)));
	}
	//PORTB1 configuration
	if(btn_B1 < 8){
		btn_port->CRL &= ~(0xF << (4 * btn_B1) );
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <btnInit+0x4c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <btnInit+0x4c>)
 800044a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800044e:	6013      	str	r3, [r2, #0]
		btn_port->CRL |=  (0x8 << (4 * btn_B1) );
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <btnInit+0x4c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a04      	ldr	r2, [pc, #16]	@ (8000468 <btnInit+0x4c>)
 8000456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800045a:	6013      	str	r3, [r2, #0]
		btn_port->CRH &= ~(0xF << (4 * ( btn_B1 - 8)));
		btn_port->CRH |=  (0x8 << (4 * ( btn_B1 - 8)));
	}


}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	40021000 	.word	0x40021000
 8000468:	40010c00 	.word	0x40010c00

0800046c <read_btnstate>:

uint8_t read_btnstate(){
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
	uint8_t btn1_state = (btn_port->IDR & (1 << 2)) >> 2;
 8000472:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <read_btnstate+0x3c>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	089b      	lsrs	r3, r3, #2
 8000478:	b2db      	uxtb	r3, r3
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	71fb      	strb	r3, [r7, #7]
	uint8_t btn2_state = (btn_port->IDR & (1 << 1)) >> 1;
 8000480:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <read_btnstate+0x3c>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	085b      	lsrs	r3, r3, #1
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	71bb      	strb	r3, [r7, #6]

	return ((btn1_state << 1) | btn2_state ) ;
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	b25a      	sxtb	r2, r3
 8000494:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000498:	4313      	orrs	r3, r2
 800049a:	b25b      	sxtb	r3, r3
 800049c:	b2db      	uxtb	r3, r3
}
 800049e:	4618      	mov	r0, r3
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	40010c00 	.word	0x40010c00

080004ac <Delay>:
//common code
void Delay(uint32_t ms){
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i< ms*8000; i++);
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	e002      	b.n	80004c0 <Delay+0x14>
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	3301      	adds	r3, #1
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80004c6:	fb03 f202 	mul.w	r2, r3, r2
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d8f4      	bhi.n	80004ba <Delay+0xe>
}
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e8:	480d      	ldr	r0, [pc, #52]	@ (8000520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ec:	f7ff fff6 	bl	80004dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	@ (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	@ (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	@ (8000534 <LoopForever+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000516:	f000 f811 	bl	800053c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051a:	f7ff fe29 	bl	8000170 <main>

0800051e <LoopForever>:

LoopForever:
  b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   r0, =_estack
 8000520:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800052c:	080005a4 	.word	0x080005a4
  ldr r2, =_sbss
 8000530:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000534:	2000002c 	.word	0x2000002c

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <__libc_init_array>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	2600      	movs	r6, #0
 8000540:	4d0c      	ldr	r5, [pc, #48]	@ (8000574 <__libc_init_array+0x38>)
 8000542:	4c0d      	ldr	r4, [pc, #52]	@ (8000578 <__libc_init_array+0x3c>)
 8000544:	1b64      	subs	r4, r4, r5
 8000546:	10a4      	asrs	r4, r4, #2
 8000548:	42a6      	cmp	r6, r4
 800054a:	d109      	bne.n	8000560 <__libc_init_array+0x24>
 800054c:	f000 f81a 	bl	8000584 <_init>
 8000550:	2600      	movs	r6, #0
 8000552:	4d0a      	ldr	r5, [pc, #40]	@ (800057c <__libc_init_array+0x40>)
 8000554:	4c0a      	ldr	r4, [pc, #40]	@ (8000580 <__libc_init_array+0x44>)
 8000556:	1b64      	subs	r4, r4, r5
 8000558:	10a4      	asrs	r4, r4, #2
 800055a:	42a6      	cmp	r6, r4
 800055c:	d105      	bne.n	800056a <__libc_init_array+0x2e>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	f855 3b04 	ldr.w	r3, [r5], #4
 8000564:	4798      	blx	r3
 8000566:	3601      	adds	r6, #1
 8000568:	e7ee      	b.n	8000548 <__libc_init_array+0xc>
 800056a:	f855 3b04 	ldr.w	r3, [r5], #4
 800056e:	4798      	blx	r3
 8000570:	3601      	adds	r6, #1
 8000572:	e7f2      	b.n	800055a <__libc_init_array+0x1e>
 8000574:	0800059c 	.word	0x0800059c
 8000578:	0800059c 	.word	0x0800059c
 800057c:	0800059c 	.word	0x0800059c
 8000580:	080005a0 	.word	0x080005a0

08000584 <_init>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	bf00      	nop
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr

08000590 <_fini>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	bf00      	nop
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr
