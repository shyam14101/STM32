
LED_BLINK_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000198  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c8  080002d0  000012d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c8  080002c8  000012d0  2**0
                  CONTENTS
  4 .ARM          00000000  080002c8  080002c8  000012d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c8  080002d0  000012d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c8  080002c8  000012c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002d0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002d0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000045f  00000000  00000000  000012f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000272  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  000019d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000052  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010000  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bfd  00000000  00000000  00011aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005453f  00000000  00000000  0001269f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066bde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000fc  00000000  00000000  00066c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00066d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002b0 	.word	0x080002b0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002b0 	.word	0x080002b0

08000170 <main>:
#include "stm32f1xx.h"

void clockInit(uint8_t a);
void pinInit();
int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
    // clock initializing
    clockInit(2);
 8000176:	2002      	movs	r0, #2
 8000178:	f000 f830 	bl	80001dc <clockInit>
    clockInit(3);
 800017c:	2003      	movs	r0, #3
 800017e:	f000 f82d 	bl	80001dc <clockInit>
    // conf pin 1 on gpioa
    GPIOA->CRL |= ( (1<<4) | (0<<5)  );
 8000182:	4b14      	ldr	r3, [pc, #80]	@ (80001d4 <main+0x64>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a13      	ldr	r2, [pc, #76]	@ (80001d4 <main+0x64>)
 8000188:	f043 0310 	orr.w	r3, r3, #16
 800018c:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~( (1<<6) | (1<<7) );
 800018e:	4b11      	ldr	r3, [pc, #68]	@ (80001d4 <main+0x64>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a10      	ldr	r2, [pc, #64]	@ (80001d4 <main+0x64>)
 8000194:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000198:	6013      	str	r3, [r2, #0]


    while (1)
    {
        GPIOA->BSRR = ( (1<<1) | (1<<2) );//set the pin to high
 800019a:	4b0e      	ldr	r3, [pc, #56]	@ (80001d4 <main+0x64>)
 800019c:	2206      	movs	r2, #6
 800019e:	611a      	str	r2, [r3, #16]

        for (int i = 0; i <=500000; i++);
 80001a0:	2300      	movs	r3, #0
 80001a2:	607b      	str	r3, [r7, #4]
 80001a4:	e002      	b.n	80001ac <main+0x3c>
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	3301      	adds	r3, #1
 80001aa:	607b      	str	r3, [r7, #4]
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	4a0a      	ldr	r2, [pc, #40]	@ (80001d8 <main+0x68>)
 80001b0:	4293      	cmp	r3, r2
 80001b2:	ddf8      	ble.n	80001a6 <main+0x36>
        GPIOA->BSRR = ( 1<<(1 + 16) | 1<<(2 + 16) ); //reset the pin to low
 80001b4:	4b07      	ldr	r3, [pc, #28]	@ (80001d4 <main+0x64>)
 80001b6:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80001ba:	611a      	str	r2, [r3, #16]

        for (int i = 0; i <=500000; i++);
 80001bc:	2300      	movs	r3, #0
 80001be:	603b      	str	r3, [r7, #0]
 80001c0:	e002      	b.n	80001c8 <main+0x58>
 80001c2:	683b      	ldr	r3, [r7, #0]
 80001c4:	3301      	adds	r3, #1
 80001c6:	603b      	str	r3, [r7, #0]
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	4a03      	ldr	r2, [pc, #12]	@ (80001d8 <main+0x68>)
 80001cc:	4293      	cmp	r3, r2
 80001ce:	ddf8      	ble.n	80001c2 <main+0x52>
        GPIOA->BSRR = ( (1<<1) | (1<<2) );//set the pin to high
 80001d0:	e7e3      	b.n	800019a <main+0x2a>
 80001d2:	bf00      	nop
 80001d4:	40010800 	.word	0x40010800
 80001d8:	0007a120 	.word	0x0007a120

080001dc <clockInit>:
    }

}

void clockInit(uint8_t a){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
	RCC->APB2ENR |= (1<<a);
 80001e6:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <clockInit+0x28>)
 80001e8:	699b      	ldr	r3, [r3, #24]
 80001ea:	79fa      	ldrb	r2, [r7, #7]
 80001ec:	2101      	movs	r1, #1
 80001ee:	fa01 f202 	lsl.w	r2, r1, r2
 80001f2:	4611      	mov	r1, r2
 80001f4:	4a03      	ldr	r2, [pc, #12]	@ (8000204 <clockInit+0x28>)
 80001f6:	430b      	orrs	r3, r1
 80001f8:	6193      	str	r3, [r2, #24]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	40021000 	.word	0x40021000

08000208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr

08000214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000214:	480d      	ldr	r0, [pc, #52]	@ (800024c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000216:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000218:	f7ff fff6 	bl	8000208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480c      	ldr	r0, [pc, #48]	@ (8000250 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490d      	ldr	r1, [pc, #52]	@ (8000254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0d      	ldr	r2, [pc, #52]	@ (8000258 <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0a      	ldr	r2, [pc, #40]	@ (800025c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0a      	ldr	r4, [pc, #40]	@ (8000260 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000242:	f000 f811 	bl	8000268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000246:	f7ff ff93 	bl	8000170 <main>

0800024a <LoopForever>:

LoopForever:
  b LoopForever
 800024a:	e7fe      	b.n	800024a <LoopForever>
  ldr   r0, =_estack
 800024c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000254:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000258:	080002d0 	.word	0x080002d0
  ldr r2, =_sbss
 800025c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000260:	2000001c 	.word	0x2000001c

08000264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000264:	e7fe      	b.n	8000264 <ADC1_2_IRQHandler>
	...

08000268 <__libc_init_array>:
 8000268:	b570      	push	{r4, r5, r6, lr}
 800026a:	2600      	movs	r6, #0
 800026c:	4d0c      	ldr	r5, [pc, #48]	@ (80002a0 <__libc_init_array+0x38>)
 800026e:	4c0d      	ldr	r4, [pc, #52]	@ (80002a4 <__libc_init_array+0x3c>)
 8000270:	1b64      	subs	r4, r4, r5
 8000272:	10a4      	asrs	r4, r4, #2
 8000274:	42a6      	cmp	r6, r4
 8000276:	d109      	bne.n	800028c <__libc_init_array+0x24>
 8000278:	f000 f81a 	bl	80002b0 <_init>
 800027c:	2600      	movs	r6, #0
 800027e:	4d0a      	ldr	r5, [pc, #40]	@ (80002a8 <__libc_init_array+0x40>)
 8000280:	4c0a      	ldr	r4, [pc, #40]	@ (80002ac <__libc_init_array+0x44>)
 8000282:	1b64      	subs	r4, r4, r5
 8000284:	10a4      	asrs	r4, r4, #2
 8000286:	42a6      	cmp	r6, r4
 8000288:	d105      	bne.n	8000296 <__libc_init_array+0x2e>
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000290:	4798      	blx	r3
 8000292:	3601      	adds	r6, #1
 8000294:	e7ee      	b.n	8000274 <__libc_init_array+0xc>
 8000296:	f855 3b04 	ldr.w	r3, [r5], #4
 800029a:	4798      	blx	r3
 800029c:	3601      	adds	r6, #1
 800029e:	e7f2      	b.n	8000286 <__libc_init_array+0x1e>
 80002a0:	080002c8 	.word	0x080002c8
 80002a4:	080002c8 	.word	0x080002c8
 80002a8:	080002c8 	.word	0x080002c8
 80002ac:	080002cc 	.word	0x080002cc

080002b0 <_init>:
 80002b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002b2:	bf00      	nop
 80002b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b6:	bc08      	pop	{r3}
 80002b8:	469e      	mov	lr, r3
 80002ba:	4770      	bx	lr

080002bc <_fini>:
 80002bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002be:	bf00      	nop
 80002c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c2:	bc08      	pop	{r3}
 80002c4:	469e      	mov	lr, r3
 80002c6:	4770      	bx	lr
