
LED_ON_OFF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001dc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800030c  08000314  00001314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800030c  0800030c  00001314  2**0
                  CONTENTS
  4 .ARM          00000000  0800030c  0800030c  00001314  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800030c  08000314  00001314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800030c  0800030c  0000130c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000310  08000310  00001310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000314  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000314  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000452  00000000  00000000  0000133d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000024f  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000019e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004d  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010000  00000000  00000000  00001aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c0c  00000000  00000000  00011aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005455d  00000000  00000000  000126b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066c0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000dc  00000000  00000000  00066c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00066d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002f4 	.word	0x080002f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002f4 	.word	0x080002f4

08000170 <main>:



uint8_t read_btnstate();

int main(){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	SystemInit();
 8000176:	f000 f869 	bl	800024c <SystemInit>

	//configure clock A for led pin
	RCC->APB2ENR |= (1<<2);
 800017a:	4b23      	ldr	r3, [pc, #140]	@ (8000208 <main+0x98>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	4a22      	ldr	r2, [pc, #136]	@ (8000208 <main+0x98>)
 8000180:	f043 0304 	orr.w	r3, r3, #4
 8000184:	6193      	str	r3, [r2, #24]
	//CONFIGURE CLOCK B FOR PUSH BUTTON PINS
	RCC->APB2ENR |= (1<<3);
 8000186:	4b20      	ldr	r3, [pc, #128]	@ (8000208 <main+0x98>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	4a1f      	ldr	r2, [pc, #124]	@ (8000208 <main+0x98>)
 800018c:	f043 0308 	orr.w	r3, r3, #8
 8000190:	6193      	str	r3, [r2, #24]

	// CONFIGURE THE PIN A0 FOR OUTPUT
	//clear mode and cnf bits (USING AND OPERATION)
	GPIOA->CRL &= ~(0xF << 0);
 8000192:	4b1e      	ldr	r3, [pc, #120]	@ (800020c <main+0x9c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a1d      	ldr	r2, [pc, #116]	@ (800020c <main+0x9c>)
 8000198:	f023 030f 	bic.w	r3, r3, #15
 800019c:	6013      	str	r3, [r2, #0]
	//set mode and cnf bits (USING OR OPERATION)
	GPIOA->CRL |=  (0x2 << 0);
 800019e:	4b1b      	ldr	r3, [pc, #108]	@ (800020c <main+0x9c>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a1a      	ldr	r2, [pc, #104]	@ (800020c <main+0x9c>)
 80001a4:	f043 0302 	orr.w	r3, r3, #2
 80001a8:	6013      	str	r3, [r2, #0]

	//CONFIGURATION OF PIN PA1 AND PA2 FOR INPUT
	// clear mode and cnf bits for pin a1
	GPIOA->CRL &= ~(0xF << 4);
 80001aa:	4b18      	ldr	r3, [pc, #96]	@ (800020c <main+0x9c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a17      	ldr	r2, [pc, #92]	@ (800020c <main+0x9c>)
 80001b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80001b4:	6013      	str	r3, [r2, #0]
	// set mode and cnf bits (using or operation)
	GPIOA->CRL |=  (0x8 << 4);
 80001b6:	4b15      	ldr	r3, [pc, #84]	@ (800020c <main+0x9c>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a14      	ldr	r2, [pc, #80]	@ (800020c <main+0x9c>)
 80001bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80001c0:	6013      	str	r3, [r2, #0]
	//clear mode and cnf bits for pin a2
	GPIOA->CRL &= ~(0xF << 8);
 80001c2:	4b12      	ldr	r3, [pc, #72]	@ (800020c <main+0x9c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a11      	ldr	r2, [pc, #68]	@ (800020c <main+0x9c>)
 80001c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80001cc:	6013      	str	r3, [r2, #0]
	// set mode and cnf bits for pin a2
	GPIOA->CRL |=  (0x8 << 8);
 80001ce:	4b0f      	ldr	r3, [pc, #60]	@ (800020c <main+0x9c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0e      	ldr	r2, [pc, #56]	@ (800020c <main+0x9c>)
 80001d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80001d8:	6013      	str	r3, [r2, #0]
//			}
//
//		}
//	}
//}
		uint8_t btn_state = read_btnstate();
 80001da:	f000 f819 	bl	8000210 <read_btnstate>
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
		if (btn_state & 0x01) {
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	f003 0301 	and.w	r3, r3, #1
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d003      	beq.n	80001f4 <main+0x84>
			// Button 2 (PA2) is pressed
			GPIOA->BSRR = (0xF << 16);
 80001ec:	4b07      	ldr	r3, [pc, #28]	@ (800020c <main+0x9c>)
 80001ee:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 80001f2:	611a      	str	r2, [r3, #16]
		} else {
			// Button 2 (PA2) is not pressed
		}

		if (btn_state & 0x02) {
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f003 0302 	and.w	r3, r3, #2
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0ed      	beq.n	80001da <main+0x6a>
			// Button 1 (PA1) is pressed
			GPIOA->BSRR = (1<<0);
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <main+0x9c>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
	{
 8000204:	e7e9      	b.n	80001da <main+0x6a>
 8000206:	bf00      	nop
 8000208:	40021000 	.word	0x40021000
 800020c:	40010800 	.word	0x40010800

08000210 <read_btnstate>:
		} else {
			// Button 1 (PA1) is not pressed
		}
  }
}
uint8_t read_btnstate(){
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
		int btn_state1 = ((GPIOA->IDR & (1<<1)) >> 1);
 8000216:	4b0c      	ldr	r3, [pc, #48]	@ (8000248 <read_btnstate+0x38>)
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	085b      	lsrs	r3, r3, #1
 800021c:	f003 0301 	and.w	r3, r3, #1
 8000220:	607b      	str	r3, [r7, #4]
		int btn_state2 = ((GPIOA->IDR & (1<<2)) >> 2);
 8000222:	4b09      	ldr	r3, [pc, #36]	@ (8000248 <read_btnstate+0x38>)
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	089b      	lsrs	r3, r3, #2
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	603b      	str	r3, [r7, #0]

		return ( (btn_state1 << 1 ) | btn_state2);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	005b      	lsls	r3, r3, #1
 8000232:	b25a      	sxtb	r2, r3
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b25b      	sxtb	r3, r3
 8000238:	4313      	orrs	r3, r2
 800023a:	b25b      	sxtb	r3, r3
 800023c:	b2db      	uxtb	r3, r3
	}
 800023e:	4618      	mov	r0, r3
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	40010800 	.word	0x40010800

0800024c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	@ (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800025c:	f7ff fff6 	bl	800024c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000260:	480c      	ldr	r0, [pc, #48]	@ (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 8000262:	490d      	ldr	r1, [pc, #52]	@ (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000264:	4a0d      	ldr	r2, [pc, #52]	@ (800029c <LoopForever+0xe>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000268:	e002      	b.n	8000270 <LoopCopyDataInit>

0800026a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800026c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026e:	3304      	adds	r3, #4

08000270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000274:	d3f9      	bcc.n	800026a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000276:	4a0a      	ldr	r2, [pc, #40]	@ (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000278:	4c0a      	ldr	r4, [pc, #40]	@ (80002a4 <LoopForever+0x16>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800027c:	e001      	b.n	8000282 <LoopFillZerobss>

0800027e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000280:	3204      	adds	r2, #4

08000282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000284:	d3fb      	bcc.n	800027e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 f811 	bl	80002ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ff71 	bl	8000170 <main>

0800028e <LoopForever>:

LoopForever:
  b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	08000314 	.word	0x08000314
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>
	...

080002ac <__libc_init_array>:
 80002ac:	b570      	push	{r4, r5, r6, lr}
 80002ae:	2600      	movs	r6, #0
 80002b0:	4d0c      	ldr	r5, [pc, #48]	@ (80002e4 <__libc_init_array+0x38>)
 80002b2:	4c0d      	ldr	r4, [pc, #52]	@ (80002e8 <__libc_init_array+0x3c>)
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	10a4      	asrs	r4, r4, #2
 80002b8:	42a6      	cmp	r6, r4
 80002ba:	d109      	bne.n	80002d0 <__libc_init_array+0x24>
 80002bc:	f000 f81a 	bl	80002f4 <_init>
 80002c0:	2600      	movs	r6, #0
 80002c2:	4d0a      	ldr	r5, [pc, #40]	@ (80002ec <__libc_init_array+0x40>)
 80002c4:	4c0a      	ldr	r4, [pc, #40]	@ (80002f0 <__libc_init_array+0x44>)
 80002c6:	1b64      	subs	r4, r4, r5
 80002c8:	10a4      	asrs	r4, r4, #2
 80002ca:	42a6      	cmp	r6, r4
 80002cc:	d105      	bne.n	80002da <__libc_init_array+0x2e>
 80002ce:	bd70      	pop	{r4, r5, r6, pc}
 80002d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d4:	4798      	blx	r3
 80002d6:	3601      	adds	r6, #1
 80002d8:	e7ee      	b.n	80002b8 <__libc_init_array+0xc>
 80002da:	f855 3b04 	ldr.w	r3, [r5], #4
 80002de:	4798      	blx	r3
 80002e0:	3601      	adds	r6, #1
 80002e2:	e7f2      	b.n	80002ca <__libc_init_array+0x1e>
 80002e4:	0800030c 	.word	0x0800030c
 80002e8:	0800030c 	.word	0x0800030c
 80002ec:	0800030c 	.word	0x0800030c
 80002f0:	08000310 	.word	0x08000310

080002f4 <_init>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr

08000300 <_fini>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	bf00      	nop
 8000304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000306:	bc08      	pop	{r3}
 8000308:	469e      	mov	lr, r3
 800030a:	4770      	bx	lr
