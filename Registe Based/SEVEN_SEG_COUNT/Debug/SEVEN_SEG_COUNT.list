
SEVEN_SEG_COUNT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000388  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00002014  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00002014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000388  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00001388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08000390  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  080003a4  00002014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080003a4  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004f5  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002ce  00000000  00000000  00002532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00002800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000059  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010000  00000000  00000000  000028e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c75  00000000  00000000  000128e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054582  00000000  00000000  00013556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000128  00000000  00000000  00067b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00067c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	08000370 	.word	0x08000370

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	08000370 	.word	0x08000370

08000170 <main>:
uint8_t read_btn_state();

// count function
void count(uint16_t i);

int main(){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	SystemInit();
 8000176:	f000 f8a7 	bl	80002c8 <SystemInit>
	// CONFIGURATION of clock for port A
	RCC->APB2ENR |= (1 << 2);
 800017a:	4b24      	ldr	r3, [pc, #144]	@ (800020c <main+0x9c>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	4a23      	ldr	r2, [pc, #140]	@ (800020c <main+0x9c>)
 8000180:	f043 0304 	orr.w	r3, r3, #4
 8000184:	6193      	str	r3, [r2, #24]
	//configure port A for seven segment display
	// reset mode and cnf for port A
	GPIOA->CRL &= ~(0xFFFFFFF << 0);
 8000186:	4b22      	ldr	r3, [pc, #136]	@ (8000210 <main+0xa0>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4a21      	ldr	r2, [pc, #132]	@ (8000210 <main+0xa0>)
 800018c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000190:	6013      	str	r3, [r2, #0]
	//set mode and cnf for port A
	GPIOA->CRL |=  (0x2222222 << 0);
 8000192:	4b1f      	ldr	r3, [pc, #124]	@ (8000210 <main+0xa0>)
 8000194:	681a      	ldr	r2, [r3, #0]
 8000196:	491e      	ldr	r1, [pc, #120]	@ (8000210 <main+0xa0>)
 8000198:	4b1e      	ldr	r3, [pc, #120]	@ (8000214 <main+0xa4>)
 800019a:	4313      	orrs	r3, r2
 800019c:	600b      	str	r3, [r1, #0]

	// configure clock for port B for push button
	RCC->APB2ENR |= ( 1 << 3 );
 800019e:	4b1b      	ldr	r3, [pc, #108]	@ (800020c <main+0x9c>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a1a      	ldr	r2, [pc, #104]	@ (800020c <main+0x9c>)
 80001a4:	f043 0308 	orr.w	r3, r3, #8
 80001a8:	6193      	str	r3, [r2, #24]
	//reset mode and cnf for pin B0 and B1
	GPIOB->CRL &= ~(0xF << 8) | (0xF << 4);
 80001aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000218 <main+0xa8>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a1a      	ldr	r2, [pc, #104]	@ (8000218 <main+0xa8>)
 80001b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80001b4:	6013      	str	r3, [r2, #0]
	//set mode and cnf for pin B0 and B1
	GPIOB->CRL |=  (0x8 << 8) | (0x8 << 4);
 80001b6:	4b18      	ldr	r3, [pc, #96]	@ (8000218 <main+0xa8>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a17      	ldr	r2, [pc, #92]	@ (8000218 <main+0xa8>)
 80001bc:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 80001c0:	6013      	str	r3, [r2, #0]
	//set the internal pull up resistor
//	GPIOB->CRL |= (0x11 << 0);

	//initializing count value
	uint16_t i = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	80fb      	strh	r3, [r7, #6]

	while(1){
		//read btn state with other variable
		uint8_t btnstate = read_btn_state();
 80001c6:	f000 f841 	bl	800024c <read_btn_state>
 80001ca:	4603      	mov	r3, r0
 80001cc:	717b      	strb	r3, [r7, #5]


		        if (btnstate & 0x01) {
 80001ce:	797b      	ldrb	r3, [r7, #5]
 80001d0:	f003 0301 	and.w	r3, r3, #1
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d006      	beq.n	80001e6 <main+0x76>
		            // Button 2 (PA2) is pressed
		        	i--;
 80001d8:	88fb      	ldrh	r3, [r7, #6]
 80001da:	3b01      	subs	r3, #1
 80001dc:	80fb      	strh	r3, [r7, #6]
//		        	Delay_ms(50);
		        	count(i);
 80001de:	88fb      	ldrh	r3, [r7, #6]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f853 	bl	800028c <count>

		        }

		        if (btnstate & 0x02) {
 80001e6:	797b      	ldrb	r3, [r7, #5]
 80001e8:	f003 0302 	and.w	r3, r3, #2
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d007      	beq.n	8000200 <main+0x90>
		            // Button 1 (PA1) is pressed
		        	i++;
 80001f0:	88fb      	ldrh	r3, [r7, #6]
 80001f2:	3301      	adds	r3, #1
 80001f4:	80fb      	strh	r3, [r7, #6]
//		        	Delay_ms(50);
		        	count(i);
 80001f6:	88fb      	ldrh	r3, [r7, #6]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f847 	bl	800028c <count>
 80001fe:	e7e2      	b.n	80001c6 <main+0x56>


		        } else {
		        	count(i);
 8000200:	88fb      	ldrh	r3, [r7, #6]
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f842 	bl	800028c <count>
	while(1){
 8000208:	e7dd      	b.n	80001c6 <main+0x56>
 800020a:	bf00      	nop
 800020c:	40021000 	.word	0x40021000
 8000210:	40010800 	.word	0x40010800
 8000214:	02222222 	.word	0x02222222
 8000218:	40010c00 	.word	0x40010c00

0800021c <Delay_ms>:
		        }

	}
}

void Delay_ms(uint32_t ms){
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < ms *8000; i++){
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
 8000228:	e002      	b.n	8000230 <Delay_ms+0x14>
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	3301      	adds	r3, #1
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000236:	fb02 f303 	mul.w	r3, r2, r3
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	429a      	cmp	r2, r3
 800023e:	d3f4      	bcc.n	800022a <Delay_ms+0xe>

	}
}
 8000240:	bf00      	nop
 8000242:	bf00      	nop
 8000244:	3714      	adds	r7, #20
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr

0800024c <read_btn_state>:

uint8_t read_btn_state(){
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
	uint8_t btn_state1 = (GPIOB->IDR & (1<<1)) >> 1;
 8000252:	4b0d      	ldr	r3, [pc, #52]	@ (8000288 <read_btn_state+0x3c>)
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	085b      	lsrs	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	71fb      	strb	r3, [r7, #7]
	uint8_t btn_state2 = (GPIOB->IDR & (1<<2)) >> 2;
 8000260:	4b09      	ldr	r3, [pc, #36]	@ (8000288 <read_btn_state+0x3c>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	089b      	lsrs	r3, r3, #2
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	71bb      	strb	r3, [r7, #6]

	return ((btn_state1 << 1) | btn_state2);
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	b25a      	sxtb	r2, r3
 8000274:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000278:	4313      	orrs	r3, r2
 800027a:	b25b      	sxtb	r3, r3
 800027c:	b2db      	uxtb	r3, r3
}
 800027e:	4618      	mov	r0, r3
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	40010c00 	.word	0x40010c00

0800028c <count>:

void count(uint16_t i){
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	80fb      	strh	r3, [r7, #6]
	GPIOA->BSRR =  digit[i] << 0;
 8000296:	88fb      	ldrh	r3, [r7, #6]
 8000298:	4a09      	ldr	r2, [pc, #36]	@ (80002c0 <count+0x34>)
 800029a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800029e:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <count+0x38>)
 80002a0:	611a      	str	r2, [r3, #16]
    Delay_ms(8);
 80002a2:	2008      	movs	r0, #8
 80002a4:	f7ff ffba 	bl	800021c <Delay_ms>
    GPIOA->BSRR =  digit[i] << 16;
 80002a8:	88fb      	ldrh	r3, [r7, #6]
 80002aa:	4a05      	ldr	r2, [pc, #20]	@ (80002c0 <count+0x34>)
 80002ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002b0:	4a04      	ldr	r2, [pc, #16]	@ (80002c4 <count+0x38>)
 80002b2:	041b      	lsls	r3, r3, #16
 80002b4:	6113      	str	r3, [r2, #16]
}
 80002b6:	bf00      	nop
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	20000000 	.word	0x20000000
 80002c4:	40010800 	.word	0x40010800

080002c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	@ (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f7ff fff6 	bl	80002c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	@ (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	@ (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	@ (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ff33 	bl	8000170 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000320:	20000030 	.word	0x20000030

08000324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC1_2_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	2600      	movs	r6, #0
 800032c:	4d0c      	ldr	r5, [pc, #48]	@ (8000360 <__libc_init_array+0x38>)
 800032e:	4c0d      	ldr	r4, [pc, #52]	@ (8000364 <__libc_init_array+0x3c>)
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	f000 f81a 	bl	8000370 <_init>
 800033c:	2600      	movs	r6, #0
 800033e:	4d0a      	ldr	r5, [pc, #40]	@ (8000368 <__libc_init_array+0x40>)
 8000340:	4c0a      	ldr	r4, [pc, #40]	@ (800036c <__libc_init_array+0x44>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
